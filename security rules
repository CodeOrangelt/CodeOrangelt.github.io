rules_version = '2';

function isAdmin() {
  let adminEmails = ['admin@ladder.com', 'brian2af@outlook.com'];
  return request.auth != null && 
    adminEmails.hasAny([request.auth.token.email.lower()]);
}

function isVerifiedUser() {
  return request.auth != null;
}

function isMatchParticipant(matchData) {
  return request.auth != null && (
    matchData.winnerEmail == request.auth.token.email ||
    matchData.loserEmail == request.auth.token.email ||
    matchData.winnerUsername == get(/databases/$(database)/documents/players/$(request.auth.uid)).data.username ||
    matchData.loserUsername == get(/databases/$(database)/documents/players/$(request.auth.uid)).data.username
  );
}

function isValidEloUpdate(incomingData) {
  return incomingData.eloRating is number &&
         incomingData.lastMatchDate is timestamp &&
         incomingData.position is number;
}

service cloud.firestore {
  match /databases/{database}/documents {
    // Players collection
    match /players/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if isAdmin() || 
                   request.auth.uid == playerId || 
                   // Allow ELO updates from matches
                   (request.resource.data.keys().hasAll(['eloRating', 'lastMatchDate', 'position']) &&
                    isValidEloUpdate(request.resource.data) &&
                    request.auth != null);
      allow delete: if isAdmin();
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && 
                           (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }

    // Match Management
    match /pendingMatches/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if isAdmin() || isMatchParticipant(resource.data);
      allow delete: if isAdmin() || isMatchParticipant(resource.data);
    }

    match /approvedMatches/{matchId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if isAdmin() || isMatchParticipant(resource.data);
      allow delete: if false;
    }

    // ELO History
    match /eloHistory/{historyId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.resource.data.keys().hasAll([
                     'player', 'previousElo', 'newElo', 'change',
                     'opponent', 'matchResult', 'timestamp',
                     'previousRank', 'newRank',
                     'isPromotion', 'isDemotion'
                   ]);
      allow update, delete: if false;
    }

    // RetroTracker
    match /retroTracker/{docId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Season Management
    match /metadata/seasonCount {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /seasons/{seasonId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}