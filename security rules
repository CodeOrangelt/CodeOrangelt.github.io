rules_version = '2';

// Helper functions
function isAdmin() {
  let adminEmails = ['admin@ladder.com', 'brian2af@outlook.com'];
  return request.auth != null && 
    adminEmails.hasAny([request.auth.token.email.lower()]);
}

function isVerifiedUser() {
  return request.auth != null;
}

function isMatchParticipant(matchData) {
  return request.auth != null &&
    matchData.participantIds.hasAny([request.auth.uid]);
}

service cloud.firestore {
  match /databases/{database}/documents {
    // Players collection
    match /players/{playerId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if request.auth != null && (
        isAdmin() ||
        request.auth.uid == playerId ||
        // Allow updates from match participants
        exists(/databases/$(database)/documents/pendingMatches/$(request.resource.data.matchId)) ||
        exists(/databases/$(database)/documents/approvedMatches/$(request.resource.data.matchId))
      );
      allow delete: if isAdmin();
    }

    // Match Management
    match /pendingMatches/{matchId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if isAdmin() || isMatchParticipant(resource.data);
      allow delete: if isAdmin() || isMatchParticipant(resource.data);
    }

    match /approvedMatches/{matchId} {
      allow read: if true;
      allow create: if isVerifiedUser();
      allow update: if isAdmin();
      allow delete: if false;
    }

    match /eloHistory/{historyId} {
      allow read: if true;
      allow create: if isVerifiedUser() && isMatchHistoryValid();
      allow update, delete: if false;

      function isMatchHistoryValid() {
        let incoming = request.resource.data;
        return incoming.type == 'match' &&
               incoming.player is string &&
               incoming.opponent is string &&
               incoming.previousElo is number &&
               incoming.newElo is number &&
               incoming.change is number &&
               incoming.timestamp is timestamp &&
               incoming.matchResult is string &&
               incoming.previousRank is string &&
               incoming.newRank is string &&
               incoming.isPromotion is bool &&
               incoming.isDemotion is bool &&
               incoming.participantIds is list;
      }
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Profile Pictures
    match /profile-pictures/{userId}/{allPaths=**} {
      allow read: if true;
      allow write: if isVerifiedUser() && isOwner(userId);
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}